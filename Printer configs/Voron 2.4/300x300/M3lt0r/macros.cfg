[virtual_sdcard]
path: ~/gcode_files

[pause_resume]

[display_status]

[gcode_macro ExtFans_Off]
gcode:
	SET_FAN_SPEED FAN=PiFan SPEED=0
	SET_FAN_SPEED FAN=OctopusFan SPEED=0

[gcode_macro ExtFans_50]
gcode:
	SET_FAN_SPEED FAN=PiFan SPEED=0.5
	SET_FAN_SPEED FAN=OctopusFan SPEED=0.5

[gcode_macro ExtFans_Full]
gcode:
	SET_FAN_SPEED FAN=PiFan SPEED=1
	SET_FAN_SPEED FAN=OctopusFan SPEED=1


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL    
   
[gcode_macro PRINT_START]
gcode:
    M140 S{params.BED_TEMP}
    M190 S{params.BED_TEMP}
    M104 S{params.EXTRUDER_TEMP}
    M109 S{params.EXTRUDER_TEMP}
    G92 e0 ; zero the extruder - Hopefully fix extruder sometimes not starting as expected...
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
	extfans_50
	ledmin
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
	
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z0 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X85 F{s*60}												; wipe back
		G0 X115	F{s*60}												; wipe forth
	{% endfor %}
	G0 X115	F{s*60}													; wipe back
	G0 Z10 F19500													; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z0	F19500													; lower
	G0 X85 F2400													; wipe back
	G0 Z10	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
	
	
######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	M118  RESUME_printer.cfg
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	M118  PAUSE_macro.cfg
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	M118  RESUME_macro.cfg
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
		RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}




# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT_z]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT_z]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	

[gcode_macro LOWERCURRENT_xy]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.6
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.6
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT_xy]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings["tmc5160 stepper_x"].run_current} 
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings["tmc5160 stepper_y"].run_current}

	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### CHAMBER TEMP WAIT #########################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts. 
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}		   							; set target temp for reference outside of the macro (for the loop)
						
	{% if not printer["temperature_sensor chamber"].temperature >= s|float %}						; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		{ action_respond_info("Chamber not at temp yet, pausing...") }					
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   							; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   							; start wait loop
	{% else %}					
		{ action_respond_info("Chamber at or above temp, continuing...") }     							; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   							; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% if printer["temperature_sensor chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		{ action_respond_info("Chamber at or above temp, continuing...") }
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		{ action_respond_info("Chamber not at temp yet, waiting...") }
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   											 ; continue waiting loop
	{% endif %}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 


[gcode_macro BEEP]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	{% set beepms = params.BEEPMS|default(1)|int %}
	{% set waitms = params.WAITPMS|default(1)|int %}
	
    {% for beep in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8
        G4 P{beepms}
        SET_PIN PIN=beeper VALUE=0
		G4 P{waitms}
    {% endfor %}
	
######################### LCD RGB CONTROLS #########################


[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

######################### LEDS #########################
[output_pin LED_pin]
pin: PA3
pwm: True
value: 0
cycle_time: 0.010

[gcode_macro LEDOFF]
gcode:  SET_PIN PIN=LED_pin VALUE=0

[gcode_macro LEDMIN]
gcode:  SET_PIN PIN=LED_pin VALUE=.5

[gcode_macro LEDMAX]
gcode:  SET_PIN PIN=LED_pin VALUE=1

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}
	
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL


	


[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,300,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,300,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE

	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel|int) %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
;mesh_max: 210,210 ; config value before
mesh_max: 260, 260
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12
	
[gcode_macro BED_MESH_AREA]

; minimum probe count
variable_min_probe_count : 3

gcode:
    {% set max_probe_point_distance = params.MAX_DISTANCE|default(25.0)|float %} ; the maximum distance between two probe points 
    {% set mesh_area_offset = params.MAX_DISTANCE|default(5.0)|float %}     ; the clearance between print area and probe area 

    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    {% set area_min_x = params.MIN_X|default(safe_min_x)|float %}
	{% set area_min_y = params.MIN_Y|default(safe_min_y)|float %}
	{% set area_max_x = params.MAX_X|default(safe_max_x)|float %}
	{% set area_max_y = params.MAX_Y|default(safe_max_y)|float %}

    {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|float %}
    {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|float %}

    {% set area_min_x = [area_min_x - mesh_area_offset, safe_min_x]|max  %}
    {% set area_min_y = [area_min_y - mesh_area_offset, safe_min_y]|max  %}
    {% set area_max_x = [area_max_x + mesh_area_offset, safe_max_x]|min  %}
    {% set area_max_y = [area_max_y + mesh_area_offset, safe_max_y]|min  %}

    { action_respond_info( "Start: " + area_min_x|string + "," + area_min_y|string ) }
    { action_respond_info( "End:   " + area_max_x|string + "," + area_max_y|string ) }

    {% set points_x = (((area_max_x - area_min_x) / ( 2 * max_probe_point_distance)) | int) * 2 + 1 %}
    {% set points_y = (((area_max_y - area_min_y) / ( 2* max_probe_point_distance)) | int) * 2 + 1 %}
    
    {% set points_x = [points_x, min_probe_count]|max  %}
    {% set points_y = [points_y, min_probe_count]|max  %}

    { action_respond_info( "Points: x:" + points_x|string + " y:" + points_y|string ) }

    {% set ref_index = (points_x * points_y / 2) | int %}
    { action_respond_info( "Reference index: " + ref_index|string) }

    BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={points_x},{points_y} relative_reference_index={ref_index}


[neopixel my_neopixel]
pin: PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 16
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0
# initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.602
#*# pid_ki = 1.155
#*# pid_kd = 131.007
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.095000, 0.088750, 0.060000, 0.091250, 0.086250
#*# 	  0.057500, 0.041250, 0.055000, 0.041250, 0.036250
#*# 	  -0.002500, 0.006250, 0.000000, 0.092500, 0.060000
#*# 	  0.042500, 0.056250, 0.051250, 0.061250, 0.076250
#*# 	  0.117500, 0.110000, 0.130000, 0.097500, 0.120000
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
#*#
#*# [bed_mesh PETG]
#*# version = 1
#*# points =
#*# 	0.085000, 0.045000, 0.051250, 0.042500, 0.071250
#*# 	0.045000, 0.010000, 0.042500, 0.038750, 0.057500
#*# 	0.012500, 0.001250, 0.000000, 0.022500, 0.081250
#*# 	0.051250, 0.048750, 0.025000, 0.036250, 0.068750
#*# 	0.083750, 0.061250, 0.072500, 0.066250, 0.077500
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
#*#
#*# [bed_mesh ABS]
#*# version = 1
#*# points =
#*# 	  0.095000, 0.088750, 0.060000, 0.091250, 0.086250
#*# 	  0.057500, 0.041250, 0.055000, 0.041250, 0.036250
#*# 	  -0.002500, 0.006250, 0.000000, 0.092500, 0.060000
#*# 	  0.042500, 0.056250, 0.051250, 0.061250, 0.076250
#*# 	  0.117500, 0.110000, 0.130000, 0.097500, 0.120000
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
